<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MBFieldListFormatter.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MBFieldListFormatter</TokenIdentifier>
			<Abstract type="html">An object that, for monospaced fonts, outputs a list of fields in an
easy-to-read format. This class is typically used in debugging.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
            
			
			<NodeRef refid="9"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBFieldListFormatter/formatterForObject:</TokenIdentifier>
			<Abstract type="html">Creates a new formatter to use for generating a debugging description for
the specified object.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>+ (nonnull instancetype)formatterForObject:(nonnull id)obj</Declaration>
			<Parameters>
				<Parameter>
					<Name>obj</Name>
					<Abstract type="html">The object whose fields are being formatted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new MBFieldListFormatter.</Abstract></ReturnValue>
			<Anchor>//api/name/formatterForObject:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBFieldListFormatter/setField:value:</TokenIdentifier>
			<Abstract type="html">Sets an object instance field on the formatter.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>- (void)setField:(nonnull NSString *)fieldName value:(nullable id)val</Declaration>
			<Parameters>
				<Parameter>
					<Name>fieldName</Name>
					<Abstract type="html">The name of the field to add.</Abstract>
				</Parameter><Parameter>
					<Name>val</Name>
					<Abstract type="html">An object instance representing the field value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setField:value:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBFieldListFormatter/setField:byTruncating:</TokenIdentifier>
			<Abstract type="html">Sets a string field on the formatter. The string is truncated if it is
longer than the number of characters specified by the value of the constant
kMBFieldListDefaultTruncateAtCharacter.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>- (void)setField:(nonnull NSString *)fieldName byTruncating:(nonnull NSString *)val</Declaration>
			<Parameters>
				<Parameter>
					<Name>fieldName</Name>
					<Abstract type="html">The name of the field to add.</Abstract>
				</Parameter><Parameter>
					<Name>val</Name>
					<Abstract type="html">A string representing the field value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setField:byTruncating:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBFieldListFormatter/setField:byTruncating:atCharacter:</TokenIdentifier>
			<Abstract type="html">Sets a string field on the formatter. The string is truncated if it is
longer than truncateAt characters.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>- (void)setField:(nonnull NSString *)fieldName byTruncating:(nonnull NSString *)val atCharacter:(NSUInteger)truncateAt</Declaration>
			<Parameters>
				<Parameter>
					<Name>fieldName</Name>
					<Abstract type="html">The name of the field to add.</Abstract>
				</Parameter><Parameter>
					<Name>val</Name>
					<Abstract type="html">A string representing the field value.</Abstract>
				</Parameter><Parameter>
					<Name>truncateAt</Name>
					<Abstract type="html">The index of the character at which val will be
            truncated. The portion of the string val starting with the
            character at index truncatAt will not be included in the
            value stored in the formatter.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setField:byTruncating:atCharacter:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBFieldListFormatter/setField:instance:</TokenIdentifier>
			<Abstract type="html">Sets an object instance field on the formatter.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>- (void)setField:(nonnull NSString *)fieldName instance:(nullable id)obj</Declaration>
			<Parameters>
				<Parameter>
					<Name>fieldName</Name>
					<Abstract type="html">The name of the field to add.</Abstract>
				</Parameter><Parameter>
					<Name>obj</Name>
					<Abstract type="html">An object instance representing the field value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setField:instance:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBFieldListFormatter/setField:debug:</TokenIdentifier>
			<Abstract type="html">Sets an debug object instance field on the formatter.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>- (void)setField:(nonnull NSString *)fieldName debug:(nullable id)obj</Declaration>
			<Parameters>
				<Parameter>
					<Name>fieldName</Name>
					<Abstract type="html">The name of the field to add.</Abstract>
				</Parameter><Parameter>
					<Name>obj</Name>
					<Abstract type="html">An object instance representing the field value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setField:debug:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBFieldListFormatter/setField:pointer:</TokenIdentifier>
			<Abstract type="html">Sets a memory pointer field on the formatter.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>- (void)setField:(nonnull NSString *)fieldName pointer:(nullable void *)ptr</Declaration>
			<Parameters>
				<Parameter>
					<Name>fieldName</Name>
					<Abstract type="html">The name of the field to add.</Abstract>
				</Parameter><Parameter>
					<Name>ptr</Name>
					<Abstract type="html">A pointer representing the field value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setField:pointer:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBFieldListFormatter/setField:boolean:</TokenIdentifier>
			<Abstract type="html">Sets a boolean field on the formatter.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>- (void)setField:(nonnull NSString *)fieldName boolean:(BOOL)val</Declaration>
			<Parameters>
				<Parameter>
					<Name>fieldName</Name>
					<Abstract type="html">The name of the field to add.</Abstract>
				</Parameter><Parameter>
					<Name>val</Name>
					<Abstract type="html">The boolean field value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setField:boolean:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBFieldListFormatter/setField:container:</TokenIdentifier>
			<Abstract type="html">Sets a container field on the formatter. Containers are objects such as
NSArray, NSSet, and NSDictionary that respond to the selector count.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>- (void)setField:(nonnull NSString *)fieldName container:(nullable id)val</Declaration>
			<Parameters>
				<Parameter>
					<Name>fieldName</Name>
					<Abstract type="html">The name of the field to add.</Abstract>
				</Parameter><Parameter>
					<Name>val</Name>
					<Abstract type="html">A container object instance representing the field value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setField:container:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBFieldListFormatter/setFields:</TokenIdentifier>
			<Abstract type="html">Sets a field on the receiver for each key/value pair contained in the
passed-in dictionary.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>- (void)setFields:(nonnull NSDictionary *)fields</Declaration>
			<Parameters>
				<Parameter>
					<Name>fields</Name>
					<Abstract type="html">The dictionary whose key/value pairs will be added as
            fields.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setFields:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBFieldListFormatter/truncateString:atCharacter:</TokenIdentifier>
			<Abstract type="html">Truncates the string val at the character index truncateAt if val the
length of the string is greater than truncateAt.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>+ (nonnull NSString *)truncateString:(nonnull NSString *)val atCharacter:(NSUInteger)truncateAt</Declaration>
			<Parameters>
				<Parameter>
					<Name>val</Name>
					<Abstract type="html">The value to (possibly) truncate.</Abstract>
				</Parameter><Parameter>
					<Name>truncateAt</Name>
					<Abstract type="html">The index of the character at which val should be
            truncated.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/truncateString:atCharacter:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBFieldListFormatter/asString</TokenIdentifier>
			<Abstract type="html">Converts the fields in the receiver into a string representation.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>- (nonnull NSString *)asString</Declaration>
			
			<ReturnValue><Abstract type="html">The string representation of the receiver&apos;s fields.</Abstract></ReturnValue>
			<Anchor>//api/name/asString</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBFieldListFormatter/asStringWithIndentation:</TokenIdentifier>
			<Abstract type="html">Converts the fields in the receiver into a string representation.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>- (nonnull NSString *)asStringWithIndentation:(nonnull NSString *)indentation</Declaration>
			<Parameters>
				<Parameter>
					<Name>indentation</Name>
					<Abstract type="html">The indentation prefix to use for the output.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The string representation of the receiver&apos;s fields.</Abstract></ReturnValue>
			<Anchor>//api/name/asStringWithIndentation:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBFieldListFormatter/asStringWithIndentation</TokenIdentifier>
			<Abstract type="html">Converts the fields in the receiver into a string representation.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>- (nonnull NSString *)asStringWithIndentation</Declaration>
			
			<ReturnValue><Abstract type="html">The string representation of the receiver&apos;s fields.</Abstract></ReturnValue>
			<Anchor>//api/name/asStringWithIndentation</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBFieldListFormatter/asDescription</TokenIdentifier>
			<Abstract type="html">Returns the field list in a format suitable for the implementation of
an object&apos;s description method.</Abstract>
			<DeclaredIn>MBFieldListFormatter.h</DeclaredIn>
			
			<Declaration>- (nonnull NSString *)asDescription</Declaration>
			
			<ReturnValue><Abstract type="html">The description.</Abstract></ReturnValue>
			<Anchor>//api/name/asDescription</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
        
        
	</File>
</Tokens>