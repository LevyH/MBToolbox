<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MBThreadsafeCache.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MBThreadsafeCache</TokenIdentifier>
			<Abstract type="html">This class implements in-memory object cache that can be safely shared
among multiple threads simultaneously.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
            
			
			<NodeRef refid="26"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBThreadsafeCache/initWithExceptionProtection:ignoreMemoryWarnings:</TokenIdentifier>
			<Abstract type="html">Initializes a new MBThreadsafeCache instance.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
			
			<Declaration>- (nonnull instancetype)initWithExceptionProtection:(BOOL)protect ignoreMemoryWarnings:(BOOL)ignore</Declaration>
			<Parameters>
				<Parameter>
					<Name>protect</Name>
					<Abstract type="html">If YES, the cache will ensure that internal exceptions
            do not leave locks in an inconsistent state. This adds overhead,
            and is generally not needed unless subclasses override primitive
            hooks that may throw exceptions.</Abstract>
				</Parameter><Parameter>
					<Name>ignore</Name>
					<Abstract type="html">If YES, the cache will not automatically clear itself when
            a memory warning occurs.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithExceptionProtection:ignoreMemoryWarnings:</Anchor>
            <NodeRef refid="26"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBThreadsafeCache/initWithExceptionProtection:</TokenIdentifier>
			<Abstract type="html">Initializes a new MBThreadsafeCache instance.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
			
			<Declaration>- (nonnull instancetype)initWithExceptionProtection:(BOOL)protect</Declaration>
			<Parameters>
				<Parameter>
					<Name>protect</Name>
					<Abstract type="html">If YES, the cache will ensure that internal exceptions
            do not leave locks in an inconsistent state. This adds overhead,
            and is generally not needed unless subclasses override primitive
            hooks that may throw exceptions.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithExceptionProtection:</Anchor>
            <NodeRef refid="26"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBThreadsafeCache/init</TokenIdentifier>
			<Abstract type="html">The default initializer for MBThreadsafeCache instances.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
			
			<Declaration>- (nonnull instancetype)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
            <NodeRef refid="26"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBThreadsafeCache/isKeyInCache:</TokenIdentifier>
			<Abstract type="html">Determines whether a given key has a corresponding value in the cache.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
			
			<Declaration>- (BOOL)isKeyInCache:(nonnull id)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if there is a value for the given key in the cache; NO
            otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/isKeyInCache:</Anchor>
            <NodeRef refid="26"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBThreadsafeCache/objectForKey:</TokenIdentifier>
			<Abstract type="html">Retrieves a cached object value given its key.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
			
			<Declaration>- (nullable id)objectForKey:(nonnull id)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key whose associated value is to be retrieved.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value associated with key. May be nil.</Abstract></ReturnValue>
			<Anchor>//api/name/objectForKey:</Anchor>
            <NodeRef refid="26"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBThreadsafeCache/setObject:forKey:</TokenIdentifier>
			<Abstract type="html">Sets a cached object value and associates it with the given key.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
			
			<Declaration>- (void)setObject:(nonnull id)obj forKey:(nonnull id)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>obj</Name>
					<Abstract type="html">The new cached value.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key whose associated value is to be set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setObject:forKey:</Anchor>
            <NodeRef refid="26"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBThreadsafeCache/removeObjectForKey:</TokenIdentifier>
			<Abstract type="html">Removes from the cache the object associated with the given key.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
			
			<Declaration>- (void)removeObjectForKey:(nonnull id)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key whose associated value is to be removed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeObjectForKey:</Anchor>
            <NodeRef refid="26"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBThreadsafeCache/objectForKeyedSubscript:</TokenIdentifier>
			<Abstract type="html">Allows accessing a cached value using the Objective-C keyed subscripting
notation.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
			
			<Declaration>- (nullable id)objectForKeyedSubscript:(nonnull id)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key whose associated value is to be retrieved.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value associated with key. May be nil.</Abstract></ReturnValue>
			<Anchor>//api/name/objectForKeyedSubscript:</Anchor>
            <NodeRef refid="26"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBThreadsafeCache/setObject:forKeyedSubscript:</TokenIdentifier>
			<Abstract type="html">Allows setting a cached value using the Objective-C keyed subscripting
notation.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
			
			<Declaration>- (void)setObject:(nonnull id)obj forKeyedSubscript:(nonnull id)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>obj</Name>
					<Abstract type="html">The new cached value.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key whose associated value is to be set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setObject:forKeyedSubscript:</Anchor>
            <NodeRef refid="26"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBThreadsafeCache/clearMemoryCache</TokenIdentifier>
			<Abstract type="html">Empties the in-memory object cache.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
			
			<Declaration>- (void)clearMemoryCache</Declaration>
			
			
			<Anchor>//api/name/clearMemoryCache</Anchor>
            <NodeRef refid="26"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBThreadsafeCache/memoryWarning</TokenIdentifier>
			<Abstract type="html">This method is called automatically when a memory warning occurs, unless the
cache was explicitly initialized to ignore memory warnings.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
			
			<Declaration>- (void)memoryWarning</Declaration>
			
			
			<Anchor>//api/name/memoryWarning</Anchor>
            <NodeRef refid="26"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBThreadsafeCache/lock</TokenIdentifier>
			<Abstract type="html">Locks the cache.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
			
			<Declaration>- (void)lock</Declaration>
			
			
			<Anchor>//api/name/lock</Anchor>
            <NodeRef refid="26"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBThreadsafeCache/unlock</TokenIdentifier>
			<Abstract type="html">Unlocks the cache.</Abstract>
			<DeclaredIn>MBThreadsafeCache.h</DeclaredIn>
			
			<Declaration>- (void)unlock</Declaration>
			
			
			<Anchor>//api/name/unlock</Anchor>
            <NodeRef refid="26"/>
		</Token>
		
        
        
	</File>
</Tokens>