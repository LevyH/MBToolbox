<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MBRegexCache.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MBRegexCache</TokenIdentifier>
			<Abstract type="html">Regular expressions can be expensive to instantiate, so we implement our
own thread-safe singleton MBRegexCache. The cache is automatically populated
as you call the methods for getting regular expressions, and it also empties
itself when memory warnings occur.</Abstract>
			<DeclaredIn>MBRegexCache.h</DeclaredIn>
            
			
			<NodeRef refid="22"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBRegexCache/regularExpressionWithPattern:options:error:</TokenIdentifier>
			<Abstract type="html">Returns an NSRegularExpression instance for the given regular
expression pattern and options.</Abstract>
			<DeclaredIn>MBRegexCache.h</DeclaredIn>
			
			<Declaration>+ (nullable NSRegularExpression *)regularExpressionWithPattern:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The NSRegularExpressionOptions specifying
            the regular expression options</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">If this method returns nil and this parameter is non-nil,
            *errPtr will be updated to point to an NSError instance
            containing further information about the error. If nil and an
            error occurs, a message will be logged to the console.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A pointer to an NSRegularExpression instance, or
            nil if the passed-in pattern could not be interpreted 
            as a valid regular expression.</Abstract></ReturnValue>
			<Anchor>//api/name/regularExpressionWithPattern:options:error:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBRegexCache/regularExpressionWithPattern:options:</TokenIdentifier>
			<Abstract type="html">Returns an NSRegularExpression instance for the given regular
expression pattern and options.</Abstract>
			<DeclaredIn>MBRegexCache.h</DeclaredIn>
			
			<Declaration>+ (nullable NSRegularExpression *)regularExpressionWithPattern:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The NSRegularExpressionOptions specifying
            the regular expression options</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A pointer to an NSRegularExpression instance, or
            nil if the passed-in pattern could not be interpreted 
            as a valid regular expression. If an error occurs causing 
            nil to be returned, a message will be logged to the
            console.</Abstract></ReturnValue>
			<Anchor>//api/name/regularExpressionWithPattern:options:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBRegexCache/regularExpressionWithPattern:</TokenIdentifier>
			<Abstract type="html">Returns an NSRegularExpression instance for the given regular
expression pattern.</Abstract>
			<DeclaredIn>MBRegexCache.h</DeclaredIn>
			
			<Declaration>+ (nullable NSRegularExpression *)regularExpressionWithPattern:(nonnull NSString *)pattern</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A pointer to an NSRegularExpression instance, or
            nil if the passed-in pattern could not be interpreted 
            as a valid regular expression. If an error occurs causing 
            nil to be returned, a message will be logged to the
            console.</Abstract></ReturnValue>
			<Anchor>//api/name/regularExpressionWithPattern:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBRegexCache/regularExpressionWithPattern:options:error:</TokenIdentifier>
			<Abstract type="html">Returns an NSRegularExpression instance for the given regular
expression pattern and options.</Abstract>
			<DeclaredIn>MBRegexCache.h</DeclaredIn>
			
			<Declaration>- (nullable NSRegularExpression *)regularExpressionWithPattern:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The NSRegularExpressionOptions specifying
            the regular expression options</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">If this method returns nil and this parameter is non-nil,
            *errPtr will be updated to point to an NSError instance
            containing further information about the error. If nil and an
            error occurs, a message will be logged to the console.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A pointer to an NSRegularExpression instance, or
            nil if the passed-in pattern could not be interpreted 
            as a valid regular expression.</Abstract></ReturnValue>
			<Anchor>//api/name/regularExpressionWithPattern:options:error:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBRegexCache/regularExpressionWithPattern:options:</TokenIdentifier>
			<Abstract type="html">Returns an NSRegularExpression instance for the given regular
expression pattern and options.</Abstract>
			<DeclaredIn>MBRegexCache.h</DeclaredIn>
			
			<Declaration>- (nullable NSRegularExpression *)regularExpressionWithPattern:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The NSRegularExpressionOptions specifying
            the regular expression options</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A pointer to an NSRegularExpression instance, or
            nil if the passed-in pattern could not be interpreted 
            as a valid regular expression. If an error occurs causing 
            nil to be returned, a message will be logged to the
            console.</Abstract></ReturnValue>
			<Anchor>//api/name/regularExpressionWithPattern:options:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBRegexCache/regularExpressionWithPattern:</TokenIdentifier>
			<Abstract type="html">Returns an NSRegularExpression instance for the given regular
expression pattern.</Abstract>
			<DeclaredIn>MBRegexCache.h</DeclaredIn>
			
			<Declaration>- (nullable NSRegularExpression *)regularExpressionWithPattern:(nonnull NSString *)pattern</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A pointer to an NSRegularExpression instance, or
            nil if the passed-in pattern could not be interpreted 
            as a valid regular expression. If an error occurs causing 
            nil to be returned, a message will be logged to the
            console.</Abstract></ReturnValue>
			<Anchor>//api/name/regularExpressionWithPattern:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
        
        
	</File>
</Tokens>