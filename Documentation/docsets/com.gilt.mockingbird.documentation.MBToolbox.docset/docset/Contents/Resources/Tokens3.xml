<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MBBitmapPixelPlane.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MBBitmapPixelPlane</TokenIdentifier>
			<Abstract type="html">Represents a plane of pixels that can be accessed individually, regardless of
the underlying pixel format. This allows code to access and manipulate bitmaps
without needing to worry about the internal representation of the pixels.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
            
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/setPixelCount:</TokenIdentifier>
			<Abstract type="html">Returns the number of pixels in the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger pixelCount</Declaration>
			
			
			<Anchor>//api/name/pixelCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/pixelCount</TokenIdentifier>
			<Abstract type="html">Returns the number of pixels in the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger pixelCount</Declaration>
			
			
			<Anchor>//api/name/pixelCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MBBitmapPixelPlane/pixelCount</TokenIdentifier>
			<Abstract type="html">Returns the number of pixels in the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger pixelCount</Declaration>
			
			
			<Anchor>//api/name/pixelCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/setColumnCount:</TokenIdentifier>
			<Abstract type="html">Returns the number of columns in the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger columnCount</Declaration>
			
			
			<Anchor>//api/name/columnCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/columnCount</TokenIdentifier>
			<Abstract type="html">Returns the number of columns in the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger columnCount</Declaration>
			
			
			<Anchor>//api/name/columnCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MBBitmapPixelPlane/columnCount</TokenIdentifier>
			<Abstract type="html">Returns the number of columns in the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger columnCount</Declaration>
			
			
			<Anchor>//api/name/columnCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/setRowCount:</TokenIdentifier>
			<Abstract type="html">Returns the number of rows in the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger rowCount</Declaration>
			
			
			<Anchor>//api/name/rowCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/rowCount</TokenIdentifier>
			<Abstract type="html">Returns the number of rows in the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger rowCount</Declaration>
			
			
			<Anchor>//api/name/rowCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MBBitmapPixelPlane/rowCount</TokenIdentifier>
			<Abstract type="html">Returns the number of rows in the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger rowCount</Declaration>
			
			
			<Anchor>//api/name/rowCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/setChannelsPerPixel:</TokenIdentifier>
			<Abstract type="html">Returns the number of color channels for each pixel in the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger channelsPerPixel</Declaration>
			
			
			<Anchor>//api/name/channelsPerPixel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/channelsPerPixel</TokenIdentifier>
			<Abstract type="html">Returns the number of color channels for each pixel in the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger channelsPerPixel</Declaration>
			
			
			<Anchor>//api/name/channelsPerPixel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MBBitmapPixelPlane/channelsPerPixel</TokenIdentifier>
			<Abstract type="html">Returns the number of color channels for each pixel in the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger channelsPerPixel</Declaration>
			
			
			<Anchor>//api/name/channelsPerPixel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/setChannelMaximumValue:</TokenIdentifier>
			<Abstract type="html">Returns the maximum value of an individual color component in the
    bitmap. </Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MBColorComponent channelMaximumValue</Declaration>
			
			
			<Anchor>//api/name/channelMaximumValue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/channelMaximumValue</TokenIdentifier>
			<Abstract type="html">Returns the maximum value of an individual color component in the
    bitmap. </Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MBColorComponent channelMaximumValue</Declaration>
			
			
			<Anchor>//api/name/channelMaximumValue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MBBitmapPixelPlane/channelMaximumValue</TokenIdentifier>
			<Abstract type="html">Returns the maximum value of an individual color component in the
    bitmap. </Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MBColorComponent channelMaximumValue</Declaration>
			
			
			<Anchor>//api/name/channelMaximumValue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/setBytesPerPixel:</TokenIdentifier>
			<Abstract type="html">Returns the number of bytes required to represent each pixel in the
    bitmap. </Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger bytesPerPixel</Declaration>
			
			
			<Anchor>//api/name/bytesPerPixel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/bytesPerPixel</TokenIdentifier>
			<Abstract type="html">Returns the number of bytes required to represent each pixel in the
    bitmap. </Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger bytesPerPixel</Declaration>
			
			
			<Anchor>//api/name/bytesPerPixel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MBBitmapPixelPlane/bytesPerPixel</TokenIdentifier>
			<Abstract type="html">Returns the number of bytes required to represent each pixel in the
    bitmap. </Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger bytesPerPixel</Declaration>
			
			
			<Anchor>//api/name/bytesPerPixel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/setSizeInBytes:</TokenIdentifier>
			<Abstract type="html">Returns the number of bytes required to represent the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger sizeInBytes</Declaration>
			
			
			<Anchor>//api/name/sizeInBytes</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/sizeInBytes</TokenIdentifier>
			<Abstract type="html">Returns the number of bytes required to represent the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger sizeInBytes</Declaration>
			
			
			<Anchor>//api/name/sizeInBytes</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MBBitmapPixelPlane/sizeInBytes</TokenIdentifier>
			<Abstract type="html">Returns the number of bytes required to represent the bitmap.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger sizeInBytes</Declaration>
			
			
			<Anchor>//api/name/sizeInBytes</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/setPixelType:</TokenIdentifier>
			<Abstract type="html">Returns a MBBitmapPixelType value indicating how the bitmap
    interprets pixel data. </Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MBBitmapPixelType pixelType</Declaration>
			
			
			<Anchor>//api/name/pixelType</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/pixelType</TokenIdentifier>
			<Abstract type="html">Returns a MBBitmapPixelType value indicating how the bitmap
    interprets pixel data. </Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MBBitmapPixelType pixelType</Declaration>
			
			
			<Anchor>//api/name/pixelType</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MBBitmapPixelPlane/pixelType</TokenIdentifier>
			<Abstract type="html">Returns a MBBitmapPixelType value indicating how the bitmap
    interprets pixel data. </Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MBBitmapPixelType pixelType</Declaration>
			
			
			<Anchor>//api/name/pixelType</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBBitmapPixelPlane/bitmapWithColumns:rows:</TokenIdentifier>
			<Abstract type="html">Creates a new MBBitmapPixelPlane containing the specified number of
rows and columns.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>+ (nullable instancetype)bitmapWithColumns:(NSUInteger)cols rows:(NSUInteger)rows</Declaration>
			<Parameters>
				<Parameter>
					<Name>cols</Name>
					<Abstract type="html">The number of pixel columns in the returned bitmap.</Abstract>
				</Parameter><Parameter>
					<Name>rows</Name>
					<Abstract type="html">The number of pixel rows in the returned bitmap.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new MBBitmapPixelPlane instance with the specified settings.
            Returns nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/bitmapWithColumns:rows:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBBitmapPixelPlane/bitmapWithSize:</TokenIdentifier>
			<Abstract type="html">Creates a new MBBitmapPixelPlane containing the specified number of
rows and columns.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>+ (nullable instancetype)bitmapWithSize:(CGSize)size</Declaration>
			<Parameters>
				<Parameter>
					<Name>size</Name>
					<Abstract type="html">The size, in pixels, of the returned bitmap. Only integral
            values are used; fractional values encountered for the width or
            height will be rounded up to the next integer value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new MBBitmapPixelPlane instance with the specified settings.
            Returns nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/bitmapWithSize:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBBitmapPixelPlane/bitmapWithSize:bitsPerChannel:colorSpace:bitmapInfo:</TokenIdentifier>
			<Abstract type="html">Creates a new MBBitmapPixelPlane having the specified settings.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>+ (nullable instancetype)bitmapWithSize:(CGSize)size bitsPerChannel:(NSUInteger)bits colorSpace:(nonnull CGColorSpaceRef)space bitmapInfo:(CGBitmapInfo)info</Declaration>
			<Parameters>
				<Parameter>
					<Name>size</Name>
					<Abstract type="html">The size, in pixels, of the returned bitmap. Only integral
            values are used; fractional values encountered for the width or
            height will be rounded up to the next integer value.</Abstract>
				</Parameter><Parameter>
					<Name>bits</Name>
					<Abstract type="html">The number of bits per color channel.</Abstract>
				</Parameter><Parameter>
					<Name>space</Name>
					<Abstract type="html">The color space that will be used by the bitmap.</Abstract>
				</Parameter><Parameter>
					<Name>info</Name>
					<Abstract type="html">The CGBitmapInfo flags describing the memory layout of the
            color channels.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new MBBitmapPixelPlane instance with the specified settings.
            Returns nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/bitmapWithSize:bitsPerChannel:colorSpace:bitmapInfo:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBBitmapPixelPlane/bitmapWithUIImage:</TokenIdentifier>
			<Abstract type="html">Creates a new MBBitmapPixelPlane populated using the content of the image
data contained in the UIImage instance provided.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>+ (nullable instancetype)bitmapWithUIImage:(nonnull UIImage *)image</Declaration>
			<Parameters>
				<Parameter>
					<Name>image</Name>
					<Abstract type="html">An image that will be used as the source content of the
            returned MBBitmapPixelPlane.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new MBBitmapPixelPlane instance containing the image specified.
            Returns nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/bitmapWithUIImage:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBBitmapPixelPlane/bitmapWithNSImage:</TokenIdentifier>
			<Abstract type="html">Creates a new MBBitmapPixelPlane populated using the content of the image
data contained in the NSImage instance provided.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>+ (nullable instancetype)bitmapWithNSImage:(nonnull NSImage *)image</Declaration>
			<Parameters>
				<Parameter>
					<Name>image</Name>
					<Abstract type="html">An image that will be used as the source content of the
            returned MBBitmapPixelPlane.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new MBBitmapPixelPlane instance containing the image specified.
            Returns nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/bitmapWithNSImage:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBBitmapPixelPlane/bitmapWithCGImage:</TokenIdentifier>
			<Abstract type="html">Creates a new MBBitmapPixelPlane populated using the content of the image
data contained in the CGImageRef provided.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>+ (nullable instancetype)bitmapWithCGImage:(nonnull CGImageRef)image</Declaration>
			<Parameters>
				<Parameter>
					<Name>image</Name>
					<Abstract type="html">An image that will be used as the source content of the
            returned MBBitmapPixelPlane.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new MBBitmapPixelPlane instance containing the image specified.
            Returns nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/bitmapWithCGImage:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBBitmapPixelPlane/bitmapWithBitmapContext:</TokenIdentifier>
			<Abstract type="html">Creates a new MBBitmapPixelPlane populated using the content of the bitmap
image data contained in the CGContextRef provided.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>+ (nullable instancetype)bitmapWithBitmapContext:(nonnull CGContextRef)bitmap</Declaration>
			<Parameters>
				<Parameter>
					<Name>bitmap</Name>
					<Abstract type="html">A CoreGraphics context that will be used as the source
            content of the returned MBBitmapPixelPlane. This context must
            be bitmap-based.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new MBBitmapPixelPlane instance containing the image specified.
            Returns nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/bitmapWithBitmapContext:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/getPixel:atColumn:row:</TokenIdentifier>
			<Abstract type="html">Retrieves the color channel values for the pixel at the specified column
(x coordinate) and row (y coordinate).</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>- (BOOL)getPixel:(nonnull inout MBBitmapPixel *)pixelPtr atColumn:(NSUInteger)col row:(NSUInteger)row</Declaration>
			<Parameters>
				<Parameter>
					<Name>pixelPtr</Name>
					<Abstract type="html">A pointer to an MBBitmapPixel structure that will receive
            color data for the specified pixel if the method succeeds.</Abstract>
				</Parameter><Parameter>
					<Name>col</Name>
					<Abstract type="html">The column of the pixel whose color data is being retrieved.</Abstract>
				</Parameter><Parameter>
					<Name>row</Name>
					<Abstract type="html">The row of the pixel whose color data is being retrieved.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success. NO will be returned if pixel is nil or if
            the specified pixel falls outside the bounds of the bitmap.</Abstract></ReturnValue>
			<Anchor>//api/name/getPixel:atColumn:row:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/getPixel:atPoint:</TokenIdentifier>
			<Abstract type="html">Retrieves the color channel values for the pixel at the specified point.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>- (BOOL)getPixel:(nonnull inout MBBitmapPixel *)pixelPtr atPoint:(CGPoint)point</Declaration>
			<Parameters>
				<Parameter>
					<Name>pixelPtr</Name>
					<Abstract type="html">A pointer to an MBBitmapPixel structure that will receive
            color data for the specified pixel if the method succeeds.</Abstract>
				</Parameter><Parameter>
					<Name>point</Name>
					<Abstract type="html">The point specifying the x and y coordinates of the pixel
            whose color data is being retrieved. Only integral values are used;
            fractional values encountered for the x or y coordinate will be
            rounded to the closest integer value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success. NO will be returned if pixel is nil or if
            the specified pixel falls outside the bounds of the bitmap.</Abstract></ReturnValue>
			<Anchor>//api/name/getPixel:atPoint:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/getPixel:atIndex:</TokenIdentifier>
			<Abstract type="html">Retrieves the color channel values for the pixel at the specified index.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>- (BOOL)getPixel:(nonnull inout MBBitmapPixel *)pixelPtr atIndex:(NSUInteger)index</Declaration>
			<Parameters>
				<Parameter>
					<Name>pixelPtr</Name>
					<Abstract type="html">A pointer to an MBBitmapPixel structure that will receive
            color data for the specified pixel if the method succeeds.</Abstract>
				</Parameter><Parameter>
					<Name>index</Name>
					<Abstract type="html">The index of the pixel in the bitmap. The top-left pixel
            is index 0, and the indices proceed from left-to-right then
            top-to-bottom.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success. NO will be returned if pixel is nil or if
            the specified pixel falls outside the bounds of the bitmap.</Abstract></ReturnValue>
			<Anchor>//api/name/getPixel:atIndex:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/setPixel:atColumn:row:</TokenIdentifier>
			<Abstract type="html">Sets the color channel values for the pixel at the specified column (x
coordinate) and row (y coordinate).</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>- (BOOL)setPixel:(MBBitmapPixel)pixel atColumn:(NSUInteger)col row:(NSUInteger)row</Declaration>
			<Parameters>
				<Parameter>
					<Name>pixel</Name>
					<Abstract type="html">The MBBitmapPixel structure that specifies the new color
            channel values for the pixel.</Abstract>
				</Parameter><Parameter>
					<Name>col</Name>
					<Abstract type="html">The column of the pixel whose color data is being retrieved.</Abstract>
				</Parameter><Parameter>
					<Name>row</Name>
					<Abstract type="html">The row of the pixel whose color data is being retrieved.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success. NO will be returned if the specified pixel
            falls outside the bounds of the bitmap.</Abstract></ReturnValue>
			<Anchor>//api/name/setPixel:atColumn:row:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/setPixel:atPoint:</TokenIdentifier>
			<Abstract type="html">Sets the color channel values for the pixel at the specified point.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>- (BOOL)setPixel:(MBBitmapPixel)pixel atPoint:(CGPoint)point</Declaration>
			<Parameters>
				<Parameter>
					<Name>pixel</Name>
					<Abstract type="html">The MBBitmapPixel structure that specifies the new color
            channel values for the pixel.</Abstract>
				</Parameter><Parameter>
					<Name>point</Name>
					<Abstract type="html">The point specifying the x and y coordinates of the pixel
            whose color data is being set. Only integral values are used;
            fractional values encountered for the x or y coordinate will be
            rounded to the closest integer value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success. NO will be returned if the specified pixel
            falls outside the bounds of the bitmap.</Abstract></ReturnValue>
			<Anchor>//api/name/setPixel:atPoint:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/setPixel:atIndex:</TokenIdentifier>
			<Abstract type="html">Sets the color channel values for the pixel at the specified index.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>- (BOOL)setPixel:(MBBitmapPixel)pixel atIndex:(NSUInteger)index</Declaration>
			<Parameters>
				<Parameter>
					<Name>pixel</Name>
					<Abstract type="html">The MBBitmapPixel structure that specifies the new color
            channel values for the pixel.</Abstract>
				</Parameter><Parameter>
					<Name>index</Name>
					<Abstract type="html">The index of the pixel in the bitmap. The top-left pixel
            is index 0, and the indices proceed from left-to-right then
            top-to-bottom.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success. NO will be returned if the specified pixel
            falls outside the bounds of the bitmap.</Abstract></ReturnValue>
			<Anchor>//api/name/setPixel:atIndex:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBBitmapPixelPlane/image</TokenIdentifier>
			<Abstract type="html">Creates a UIImage instance containing a visual representation of the current
contents of the receiver.</Abstract>
			<DeclaredIn>MBBitmapPixelPlane.h</DeclaredIn>
			
			<Declaration>- (nonnull UIImage *)image</Declaration>
			
			<ReturnValue><Abstract type="html">A new UIImage.</Abstract></ReturnValue>
			<Anchor>//api/name/image</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
        
        
	</File>
</Tokens>