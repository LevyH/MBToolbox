<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSString+MBRegex.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSString(MBRegex)</TokenIdentifier>
			<Abstract type="html">An NSString class extension that provides various methods for creating
and utilizing regular expressions.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
            
			
			<NodeRef refid="35"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/regularExpression</TokenIdentifier>
			<Abstract type="html">Returns an NSRegularExpression instance by treating the receiver as a
regular expression pattern string.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSRegularExpression *)regularExpression</Declaration>
			
			<ReturnValue><Abstract type="html">The regular expression, or nil if the receiver could not be
            interpreted as a valid regular expression.</Abstract></ReturnValue>
			<Anchor>//api/name/regularExpression</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/regularExpressionWithOptions:</TokenIdentifier>
			<Abstract type="html">Returns an NSRegularExpression instance by treating the receiver as a
regular expression pattern string.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSRegularExpression *)regularExpressionWithOptions:(NSRegularExpressionOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>options</Name>
					<Abstract type="html">The options that govern the behavior of the returned
            regular expression.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The regular expression, or nil if the receiver could not be
            interpreted as a valid regular expression.</Abstract></ReturnValue>
			<Anchor>//api/name/regularExpressionWithOptions:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/regularExpressionWithOptions:error:</TokenIdentifier>
			<Abstract type="html">Returns an NSRegularExpression instance by treating the receiver as a
regular expression pattern string.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSRegularExpression *)regularExpressionWithOptions:(NSRegularExpressionOptions)options error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>options</Name>
					<Abstract type="html">The options that govern the behavior of the returned
            regular expression.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to storage for an NSError instance.
            If this parameter is non-nil and an error occurs, *errPtr
            will be updated to point to an NSError describing the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The regular expression, or nil if the receiver could not be
            interpreted as a valid regular expression.</Abstract></ReturnValue>
			<Anchor>//api/name/regularExpressionWithOptions:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/escapedRegexPattern</TokenIdentifier>
			<Abstract type="html">Creates a new regular expression pattern string by escaping metacharacters
contained in the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nonnull NSString *)escapedRegexPattern</Declaration>
			
			<ReturnValue><Abstract type="html">The escaped pattern string.</Abstract></ReturnValue>
			<Anchor>//api/name/escapedRegexPattern</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/escapedRegexTemplate</TokenIdentifier>
			<Abstract type="html">Creates a new regular expression template string by escaping metacharacters
contained in the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nonnull NSString *)escapedRegexTemplate</Declaration>
			
			<ReturnValue><Abstract type="html">The escaped template string.</Abstract></ReturnValue>
			<Anchor>//api/name/escapedRegexTemplate</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/matchesWithRegex:</TokenIdentifier>
			<Abstract type="html">Matches the specified regular expression against the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSArray *)matchesWithRegex:(nonnull NSString *)pattern</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array of NSTextCheckingResult objects representing the regular
            expression pattern matches found within the receiver, or nil
            if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/matchesWithRegex:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/matchesWithRegex:options:</TokenIdentifier>
			<Abstract type="html">Matches the specified regular expression against the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSArray *)matchesWithRegex:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array of NSTextCheckingResult objects representing the regular
            expression pattern matches found within the receiver, or nil
            if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/matchesWithRegex:options:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/matchesWithRegex:options:range:</TokenIdentifier>
			<Abstract type="html">Matches the specified regular expression against the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSArray *)matchesWithRegex:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options range:(NSRange)range</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>range</Name>
					<Abstract type="html">The range of characters in the receiver within which matching
            will occur.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array of NSTextCheckingResult objects representing the regular
            expression pattern matches found within the receiver, or nil
            if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/matchesWithRegex:options:range:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/matchesWithRegex:options:range:error:</TokenIdentifier>
			<Abstract type="html">Matches the specified regular expression against the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSArray *)matchesWithRegex:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options range:(NSRange)range error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>range</Name>
					<Abstract type="html">The range of characters in the receiver within which matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to storage for an NSError instance.
            If this parameter is non-nil and an error occurs, *errPtr
            will be updated to point to an NSError describing the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array of NSTextCheckingResult objects representing the regular
            expression pattern matches found within the receiver, or nil
            if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/matchesWithRegex:options:range:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/isMatchedByRegex:</TokenIdentifier>
			<Abstract type="html">Determines if the receiver contains at least one match of the given
regular expression pattern.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (BOOL)isMatchedByRegex:(nonnull NSString *)pattern</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the receiver contained at least one match of pattern;
            NO if there were no matches.</Abstract></ReturnValue>
			<Anchor>//api/name/isMatchedByRegex:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/isMatchedByRegex:options:</TokenIdentifier>
			<Abstract type="html">Determines if the receiver contains at least one match of the given
regular expression pattern.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (BOOL)isMatchedByRegex:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the receiver contained at least one match of pattern;
            NO if there were no matches.</Abstract></ReturnValue>
			<Anchor>//api/name/isMatchedByRegex:options:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/isMatchedByRegex:options:range:</TokenIdentifier>
			<Abstract type="html">Determines if the receiver contains at least one match of the given
regular expression pattern within the specified range.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (BOOL)isMatchedByRegex:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options range:(NSRange)range</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>range</Name>
					<Abstract type="html">The range of characters in the receiver within which matching
            will occur.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the receiver contained at least one match of pattern;
            NO if there were no matches.</Abstract></ReturnValue>
			<Anchor>//api/name/isMatchedByRegex:options:range:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/isMatchedByRegex:options:range:error:</TokenIdentifier>
			<Abstract type="html">Determines if the receiver contains at least one match of the given
regular expression pattern within the specified range.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (BOOL)isMatchedByRegex:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options range:(NSRange)range error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>range</Name>
					<Abstract type="html">The range of characters in the receiver within which matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to storage for an NSError instance.
            If this parameter is non-nil and an error occurs, *errPtr
            will be updated to point to an NSError describing the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the receiver contained at least one match of pattern;
            NO if there were no matches.</Abstract></ReturnValue>
			<Anchor>//api/name/isMatchedByRegex:options:range:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/numberOfRegexMatches:</TokenIdentifier>
			<Abstract type="html">Returns the number of matches found in the receiver of the given regular
expression pattern.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (NSUInteger)numberOfRegexMatches:(nonnull NSString *)pattern</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The number of matches.</Abstract></ReturnValue>
			<Anchor>//api/name/numberOfRegexMatches:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/numberOfRegexMatches:options:</TokenIdentifier>
			<Abstract type="html">Returns the number of matches found in the receiver of the given regular
expression pattern.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (NSUInteger)numberOfRegexMatches:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The number of matches.</Abstract></ReturnValue>
			<Anchor>//api/name/numberOfRegexMatches:options:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/numberOfRegexMatches:options:range:</TokenIdentifier>
			<Abstract type="html">Returns the number of matches found in the receiver of the given regular
expression pattern.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (NSUInteger)numberOfRegexMatches:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options range:(NSRange)range</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>range</Name>
					<Abstract type="html">The range of characters in the receiver within which matching
            will occur.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The number of matches.</Abstract></ReturnValue>
			<Anchor>//api/name/numberOfRegexMatches:options:range:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/numberOfRegexMatches:options:range:error:</TokenIdentifier>
			<Abstract type="html">Returns the number of matches found in the receiver of the given regular
expression pattern.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (NSUInteger)numberOfRegexMatches:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options range:(NSRange)range error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>range</Name>
					<Abstract type="html">The range of characters in the receiver within which matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to storage for an NSError instance.
            If this parameter is non-nil and an error occurs, *errPtr
            will be updated to point to an NSError describing the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The number of matches.</Abstract></ReturnValue>
			<Anchor>//api/name/numberOfRegexMatches:options:range:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/firstRegexMatch:</TokenIdentifier>
			<Abstract type="html">Returns the first occurrence of the specified regular expression pattern
found within the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSTextCheckingResult *)firstRegexMatch:(nonnull NSString *)pattern</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSTextCheckingResult instance containing the results of the
            match, or nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/firstRegexMatch:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/firstRegexMatch:options:</TokenIdentifier>
			<Abstract type="html">Returns the first occurrence of the specified regular expression pattern
found within the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSTextCheckingResult *)firstRegexMatch:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSTextCheckingResult instance containing the results of the
            match, or nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/firstRegexMatch:options:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/firstRegexMatch:options:range:</TokenIdentifier>
			<Abstract type="html">Returns the first occurrence of the specified regular expression pattern
found within the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSTextCheckingResult *)firstRegexMatch:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options range:(NSRange)range</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>range</Name>
					<Abstract type="html">The range of characters in the receiver within which matching
            will occur.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSTextCheckingResult instance containing the results of the
            match, or nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/firstRegexMatch:options:range:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/firstRegexMatch:options:range:error:</TokenIdentifier>
			<Abstract type="html">Returns the first occurrence of the specified regular expression pattern
found within the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSTextCheckingResult *)firstRegexMatch:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options range:(NSRange)range error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>range</Name>
					<Abstract type="html">The range of characters in the receiver within which matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to storage for an NSError instance.
            If this parameter is non-nil and an error occurs, *errPtr
            will be updated to point to an NSError describing the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSTextCheckingResult instance containing the results of the
            match, or nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/firstRegexMatch:options:range:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/rangeOfFirstRegexMatch:</TokenIdentifier>
			<Abstract type="html">Determines the range of the first match of the given regular expression within
the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (NSRange)rangeOfFirstRegexMatch:(nonnull NSString *)pattern</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The range of the first match. Will be {NSNotFound, 0} if there
            is no match.</Abstract></ReturnValue>
			<Anchor>//api/name/rangeOfFirstRegexMatch:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/rangeOfFirstRegexMatch:options:</TokenIdentifier>
			<Abstract type="html">Determines the range of the first match of the given regular expression within
the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (NSRange)rangeOfFirstRegexMatch:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The range of the first match. Will be {NSNotFound, 0} if there
            is no match.</Abstract></ReturnValue>
			<Anchor>//api/name/rangeOfFirstRegexMatch:options:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/rangeOfFirstRegexMatch:options:range:</TokenIdentifier>
			<Abstract type="html">Determines the range of the first match of the given regular expression within
the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (NSRange)rangeOfFirstRegexMatch:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options range:(NSRange)range</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>range</Name>
					<Abstract type="html">The range of characters in the receiver within which matching
            will occur.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The range of the first match. Will be {NSNotFound, 0} if there
            is no match.</Abstract></ReturnValue>
			<Anchor>//api/name/rangeOfFirstRegexMatch:options:range:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/rangeOfFirstRegexMatch:options:range:error:</TokenIdentifier>
			<Abstract type="html">Determines the range of the first match of the given regular expression within
the receiver.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (NSRange)rangeOfFirstRegexMatch:(nonnull NSString *)pattern options:(NSRegularExpressionOptions)options range:(NSRange)range error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>range</Name>
					<Abstract type="html">The range of characters in the receiver within which matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to storage for an NSError instance.
            If this parameter is non-nil and an error occurs, *errPtr
            will be updated to point to an NSError describing the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The range of the first match. Will be {NSNotFound, 0} if there
            is no match.</Abstract></ReturnValue>
			<Anchor>//api/name/rangeOfFirstRegexMatch:options:range:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/stringByReplacingRegexMatches:withTemplate:</TokenIdentifier>
			<Abstract type="html">Returns a new string by replacing each match of the specified regular
expression pattern with the replacement template provided.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSString *)stringByReplacingRegexMatches:(nonnull NSString *)pattern withTemplate:(nonnull NSString *)templ</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>templ</Name>
					<Abstract type="html">The template to use for replacing the regular expression
            matches.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The resulting string, or nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/stringByReplacingRegexMatches:withTemplate:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/stringByReplacingRegexMatches:withTemplate:options:</TokenIdentifier>
			<Abstract type="html">Returns a new string by replacing each match of the specified regular
expression pattern with the replacement template provided.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSString *)stringByReplacingRegexMatches:(nonnull NSString *)pattern withTemplate:(nonnull NSString *)templ options:(NSRegularExpressionOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>templ</Name>
					<Abstract type="html">The template to use for replacing the regular expression
            matches.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The resulting string, or nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/stringByReplacingRegexMatches:withTemplate:options:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/stringByReplacingRegexMatches:withTemplate:options:range:</TokenIdentifier>
			<Abstract type="html">Returns a new string by replacing each match of the specified regular
expression pattern with the replacement template provided.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSString *)stringByReplacingRegexMatches:(nonnull NSString *)pattern withTemplate:(nonnull NSString *)templ options:(NSRegularExpressionOptions)options range:(NSRange)range</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>templ</Name>
					<Abstract type="html">The template to use for replacing the regular expression
            matches.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>range</Name>
					<Abstract type="html">The range of characters in the receiver within which matching
            will occur.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The resulting string, or nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/stringByReplacingRegexMatches:withTemplate:options:range:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSString/stringByReplacingRegexMatches:withTemplate:options:range:error:</TokenIdentifier>
			<Abstract type="html">Returns a new string by replacing each match of the specified regular
expression pattern with the replacement template provided.</Abstract>
			<DeclaredIn>NSString+MBRegex.h</DeclaredIn>
			
			<Declaration>- (nullable NSString *)stringByReplacingRegexMatches:(nonnull NSString *)pattern withTemplate:(nonnull NSString *)templ options:(NSRegularExpressionOptions)options range:(NSRange)range error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>pattern</Name>
					<Abstract type="html">The regular expression pattern to match.</Abstract>
				</Parameter><Parameter>
					<Name>templ</Name>
					<Abstract type="html">The template to use for replacing the regular expression
            matches.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The regular expression options that govern how matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>range</Name>
					<Abstract type="html">The range of characters in the receiver within which matching
            will occur.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to storage for an NSError instance.
            If this parameter is non-nil and an error occurs, *errPtr
            will be updated to point to an NSError describing the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The resulting string, or nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/stringByReplacingRegexMatches:withTemplate:options:range:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
        
        
	</File>
</Tokens>