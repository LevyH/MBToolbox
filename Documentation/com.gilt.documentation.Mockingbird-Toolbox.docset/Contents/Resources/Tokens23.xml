<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MBRoundedRectTools.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MBRoundedRectTools</TokenIdentifier>
			<Abstract type="html">A few tools for creating rounded rectangle paths and managing corner radii.</Abstract>
			<DeclaredIn>MBRoundedRectTools.h</DeclaredIn>
            
			
			<NodeRef refid="23"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBRoundedRectTools/cornerRadiusSizedForRect:</TokenIdentifier>
			<Abstract type="html">Returns a corner radius sized appropriately for the given rectangle.</Abstract>
			<DeclaredIn>MBRoundedRectTools.h</DeclaredIn>
			
			<Declaration>+ (CGFloat)cornerRadiusSizedForRect:(CGRect)rect</Declaration>
			<Parameters>
				<Parameter>
					<Name>rect</Name>
					<Abstract type="html">The rectangle for which a corner radius is desired.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A corner radius that should look good when used with rect.
            (Or, since &quot;good&quot; is subjective, a corner radius that shouldn&apos;t
            look ridiculous when used with rect.)</Abstract></ReturnValue>
			<Anchor>//api/name/cornerRadiusSizedForRect:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBRoundedRectTools/adjustCornerRadius:fromRect:withInset:</TokenIdentifier>
			<Abstract type="html">Returns a corner radius that approximates the curvature of the corner
radius supplied for the given rectangle when that rectangle is inset by the
specified amount.</Abstract>
			<DeclaredIn>MBRoundedRectTools.h</DeclaredIn>
			
			<Declaration>+ (CGFloat)adjustCornerRadius:(CGFloat)radius fromRect:(CGRect)rect withInset:(CGFloat)inset</Declaration>
			<Parameters>
				<Parameter>
					<Name>radius</Name>
					<Abstract type="html">The radius used with rect.</Abstract>
				</Parameter><Parameter>
					<Name>rect</Name>
					<Abstract type="html">The rectangle to be adjusted by inset.</Abstract>
				</Parameter><Parameter>
					<Name>inset</Name>
					<Abstract type="html">The number of points each edge of rect will be inset
            to create the rectangle used for calculating the returned corner
            radius. The width and height dimensions of rect are each reduced
            by 2 ✕ inset; a positive inset results in a rectangle smaller
            than rect, while a negative inset results in a larger rectangle.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A corner radius for the adjusted rectangle.</Abstract></ReturnValue>
			<Anchor>//api/name/adjustCornerRadius:fromRect:withInset:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBRoundedRectTools/adjustCornerRadius:fromRect:toRect:</TokenIdentifier>
			<Abstract type="html">Returns a corner radius for a rectangle that approximates the curvature of
a corner radius used for a rectangle of a different size.</Abstract>
			<DeclaredIn>MBRoundedRectTools.h</DeclaredIn>
			
			<Declaration>+ (CGFloat)adjustCornerRadius:(CGFloat)radius fromRect:(CGRect)fromRect toRect:(CGRect)toRect</Declaration>
			<Parameters>
				<Parameter>
					<Name>radius</Name>
					<Abstract type="html">The radius used with fromRect.</Abstract>
				</Parameter><Parameter>
					<Name>fromRect</Name>
					<Abstract type="html">The rectangle that uses the corner radius radius.</Abstract>
				</Parameter><Parameter>
					<Name>toRect</Name>
					<Abstract type="html">The rectangle for which the corner radius will be returned.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A corner radius for toRect that approximates the curvature
            of the corner arc resulting from using radius with fromRect.</Abstract></ReturnValue>
			<Anchor>//api/name/adjustCornerRadius:fromRect:toRect:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBRoundedRectTools/newRoundedPathForRectangle:withRadius:</TokenIdentifier>
			<Abstract type="html">Creates a new path for a rounded rectangle. The path will be adjusted to ensure
that on non-Retina displays, subpixel rendering will not occur.</Abstract>
			<DeclaredIn>MBRoundedRectTools.h</DeclaredIn>
			
			<Declaration>+ (nonnull CGPathRef)newRoundedPathForRectangle:(CGRect)rect withRadius:(CGFloat)radius</Declaration>
			<Parameters>
				<Parameter>
					<Name>rect</Name>
					<Abstract type="html">The rectangle for which a rounded rectangle path is desired.</Abstract>
				</Parameter><Parameter>
					<Name>radius</Name>
					<Abstract type="html">The corner radius to be used by the returned path.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new CGPathRef usable for drawing the rounded rectangle path.</Abstract></ReturnValue>
			<Anchor>//api/name/newRoundedPathForRectangle:withRadius:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBRoundedRectTools/newRoundedPathForRectangle:withRadius:forStrokeWidth:</TokenIdentifier>
			<Abstract type="html">Creates a new path for a rounded rectangle. The rectangle is adjusted to ensure
that the stroke falls entirely within the bounds of the path, and that odd
stroke widths do not result in subpixel rendering on non-Retina displays.</Abstract>
			<DeclaredIn>MBRoundedRectTools.h</DeclaredIn>
			
			<Declaration>+ (nonnull CGPathRef)newRoundedPathForRectangle:(CGRect)rect withRadius:(CGFloat)radius forStrokeWidth:(CGFloat)width</Declaration>
			<Parameters>
				<Parameter>
					<Name>rect</Name>
					<Abstract type="html">The rectangle for which a rounded rectangle path is desired.</Abstract>
				</Parameter><Parameter>
					<Name>radius</Name>
					<Abstract type="html">The corner radius to be used by the returned path.</Abstract>
				</Parameter><Parameter>
					<Name>width</Name>
					<Abstract type="html">The stroke width that will be used when drawing the returned
            path.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new CGPathRef usable for drawing the rounded rectangle path.</Abstract></ReturnValue>
			<Anchor>//api/name/newRoundedPathForRectangle:withRadius:forStrokeWidth:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBRoundedRectTools/newRoundedPathForRectangle:withRadius:insetBy:</TokenIdentifier>
			<Abstract type="html">Creates a new path for a rounded rectangle. The rectangle is adjusted by the
specified inset, but is not otherwise adjusted to account for stroke widths
or subpixel rendering on non-Retina displays.</Abstract>
			<DeclaredIn>MBRoundedRectTools.h</DeclaredIn>
			
			<Declaration>+ (nonnull CGPathRef)newRoundedPathForRectangle:(CGRect)rect withRadius:(CGFloat)radius insetBy:(CGFloat)inset</Declaration>
			<Parameters>
				<Parameter>
					<Name>rect</Name>
					<Abstract type="html">The rectangle for which a rounded rectangle path is desired.</Abstract>
				</Parameter><Parameter>
					<Name>radius</Name>
					<Abstract type="html">The corner radius to be used by the returned path.</Abstract>
				</Parameter><Parameter>
					<Name>inset</Name>
					<Abstract type="html">The number of points each edge of rect will be inset
            to create the rounded rectangle path. The width and height
            dimensions of rect are each reduced by 2 ✕ inset; a positive 
            inset results in a rectangle smaller than rect, while a negative
            inset results in a larger rectangle.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new CGPathRef usable for drawing the rounded rectangle path.</Abstract></ReturnValue>
			<Anchor>//api/name/newRoundedPathForRectangle:withRadius:insetBy:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
        
        
	</File>
</Tokens>